# regex to update copied constants from errors.go to here: `^.*= (".*").*// (.*)$`
bad-import: "expected package name or import group"
expected-alias-binding: "expected '=' to follow type alias name"
expected-binding-term: "expected a binding term"
expected-body-element: "expected body element"
expected-case-arm-thick-arrow: "expected '=>' to follow case arm pattern"
expected-colon-equal: "expected ':='"
expected-command: "expected command"
expected-constrainer: "expected constrainer"
expected-def: "expected definition"
expected-eof: "expected end of file"
expected-forall-binder: "expected forall binder"
expected-forall-in: "expected 'in' to follow 'forall' binders"
expected-id: "expected identifier"
expected-in: "expected 'in'"
expected-inst-where: "expected 'where' clause to follow inst declaration"
expected-lambda-abstraction: "expected lambda abstraction"
expected-lambda-thick-arrow: "expected '=>' to follow lambda binders"
expected-main-element: "expected main element"
expected-module-id: "expected module name"
expected-name: "expected name"
expected-namespace-alias: "expected namespace alias to follow 'as'"
expected-of: "expected 'of' to follow case scrutinee"
expected-pattern-unit: "expected pattern unit"
expected-pattern: "expected pattern"
expected-right-brace: "expected '}'"
expected-right-paren: "expected ')'"
expected-slash-module-id: "expected module identifier to follow '/'"
expected-spec-def: "expected spec definition"
expected-spec-inst: "expected spec instance"
expected-spec-where: "expected 'where' clause to follow spec declaration"
expected-string-lit: "expected string literal"
expected-symbol: "expected symbol"
expected-syntax-binding-id: "expected syntax binding identifier"
expected-syntax-binding: "expected '=' to follow syntax rule"
expected-syntax-rule: "expected syntax rule"
expected-syntax: "expected syntax definition"
expected-type-alias-name: "expected a name to follow 'alias'"
expected-type-alias: "expected type alias"
expected-type-constructor-name: "expected type constructor name"
expected-type-constructor: "expected type constructor"
expected-type-sig: "expected type signature"
expected-typing-or-def: "expected a typing or definition"
expected-typing: "expected typing"
expected-upper-id: "expected uppercase identifier"
expected-with-arm-thick-arrow: "expected '=>' to follow with arm pattern"
expected-with-clause-arm: "expected 'with' clause arm"
expected-with-clause: "expected 'with' clause"
illegal-multiple-enclosure: "illegal multiply enclosed term"
illegal-namespace-alias: "illegal namespace alias, expected lowercase identifier"
illegal-open-modifier-typing: "modifier 'open' targeted a typing, but no constructors were found"
illegal-open-modifier: "modifier 'open' can only target data type definitions"
illegal-visible-def: "visibility modifiers cannot be applied to definitions, only their signatures"
invalid-annotation-target: "cannot find a valid target for annotations"
unexpected-eof: "unexpected end of file"
unexpected-structure: "unexpected structure in source body"
unexpected-token: "unexpected token"
expected-bound-expression: "let-binding requires a bound expression"
expected-type: "expected type"
expected-let-expr: "expected let-binding"
expected-expr: "expected expression"
expected-type-constraint: "expected type constraint"
expected-deriving-body: "expected body for deriving clause"
expected-case-arm: "expected case arm"
expected-modal-id: "modality must be followed by an identifier"
illegal-visibility-target: "illegal target for visibility modifier"
expected-import-path: "expected import path"
illegal-empty-using-clause: "illegal empty using clause"
illegal-unenclosed-using-clause: "illegal unenclosed symbol selection in using clause"