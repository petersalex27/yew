module Builtin

%system (TypeSystem) where
  -- Constants
  public %const (Type)
  %const (Type 1)
  -- Axiom
  %axiom (Type : Type 1)
  -- Rules
  %rule ((Type, Type) -> Type)
  %rule ((Type, Type 1) -> Type 1)
  %rule ((Type 1, Type) -> Type)
  %rule ((Type 1, Type 1) -> Type 1)

open (=) : {a : Type} -> {b : Type} -> a -> b -> Type where
  Refl : {x : a} -> x = x

open () : Type where
  () : ()

open Bool : Type where
  True : Bool
  False : Bool

open Int : Type where
	0xffff_ffff_ffff_ffff
	, 0xffff_ffff_ffff_fffe
	, ..
	, 0x7fff_ffff_ffff_ffff : Int

open Uint : Type where
  0x0000_0000_0000_0000u
  , 0x0000_0000_0000_0001u
  , ..
  , 0xffff_ffff_ffff_ffffu : Int

Float : Type where
	_ : Float

Char : Type where
	'\x0', '\x1', .., '\x7f' : Char

module Unsafe where
  %unsafe : Type -> Type
  %unsafe(Pointer a) : %unsafe(Pointer a)

public String : record where
  length : Uint
  data : %unsafe(Pointer Char)

malloc : forall a . Uint -> %unsafe(Pointer a)
  := (\size -> %foreign(malloc) size) : %unsafe(Pointer a)

free : forall a . %unsafe(Pointer a) -> ()
  := (\ptr -> %foreign(free) ptr)