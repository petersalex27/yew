this is the initial grammar w/o non-prefix identifiers--first pass, basically

top ::= 
  `module` IDENT [ `where` func { func } ]

expr ::= 
  INT
  | CHAR
  | STRING
  | FLOAT
  | IDENT
  | expr expr
  | `[` expr { `,` expr } [ `,` ] `]`
  | `(` expr `)`
  | `(` expr { `,` expr } [ `,` ] `)`
  | i(n) `let` IDENT `:` type [ i(m > n) expr `=` expr ] `in` expr
  | `let` expr `=` expr `in` expr
  | `\` IDENT { IDENT } `.` expr

expr' ::=
  expr
  | i(n) expr `where` i(m > n) func { i(m) func }
\

func ::= 
  IDENT `:` type
  | i(n) IDENT `:` type `where` i(m > n) IDENT `:` type { i(m) IDENT `:` type }
  | expr { expr } = expr'

type ::=
  IDENT
  | type `->` type
  | `(` type { `,` type } [ `,` ] `)`
  | `[` type `]` [ expr ]
  | IDENT `:` type
  | `(` type `)`
  | `{` type `}`
  | type type
  | expr